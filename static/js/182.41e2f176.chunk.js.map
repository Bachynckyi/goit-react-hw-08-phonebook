{"version":3,"file":"static/js/182.41e2f176.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactItem/ContactItem.module.css?7ce2","components/ContactList/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/Contactlist.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"addInput\":\"ContactForm_addInput__ZIadr\",\"label\":\"ContactForm_label__-cVXI\",\"form\":\"ContactForm_form__dhl+T\",\"button_submit\":\"ContactForm_button_submit__dIp-p\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import css from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as operations from 'redux/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState(\"\");\n    const [number, setNumber] = useState(\"\");\n    const contacts = useSelector(state => state.contacts.items);\n    const checkName = contacts.map(contact => contact.name);\n\n    const handleChange = event => {\n        const {name, value} = event.currentTarget;\n        switch(name){\n            case 'name': setName(value);\n              break;\n            case 'number': setNumber(value);\n              break;\n            default:\n              return;\n        };\n    };\n    \n    const handleSubmit = event => {\n        event.preventDefault();\n        const checkingName = checkName.some(contact => contact.toLowerCase() === name.toLowerCase());\n        if (checkingName) {\n            return alert(`${name} is already in contacts`);\n        };      \n        const newState = { id: nanoid(), name, number};\n        dispatch(operations.addContact(newState));\n        reset();\n    };\n\n    const reset = () => {\n        setName(\"\");\n        setNumber(\"\");\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={css.form}>\n            <div>\n                <label className={css.label}>Name\n                    <input\n                        value={name}\n                        onChange={handleChange}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        placeholder='Please enter name'\n                        className={css.addInput}\n                    />\n                </label>\n            </div>\n            <div>\n                <label className={css.label}>Number\n                    <input\n                        value={number}\n                        onChange={handleChange}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        placeholder='Please enter number'\n                        className={css.addInput}\n                        />\n                </label>\n            </div>\n            <button type='submit' className={css.button_submit}>Add Contact</button>\n        </form>\n    )\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactItem_item__pER5Q\",\"butonDelete\":\"ContactItem_butonDelete__epFtH\",\"number\":\"ContactItem_number__2mm0v\",\"id\":\"ContactItem_id__5UH0m\"};","import PropTypes from 'prop-types';\nimport css from './ContactItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport * as operations from 'redux/contacts/contactsOperations';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={css.item}>\n      <div>\n        <b><span>{name}:</span></b>\n        <span className={css.number}>{number}</span>\n      </div>\n      <button className={css.butonDelete} type='button' onClick={() => {\n        dispatch(operations.deleteContact(id))\n        }}>Delete</button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import { ContactItem } from \"./ContactItem/ContactItem\"\nimport css from './ContactList.module.css';\nimport theme from './ContactItem/ContactItem.module.css';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { fetchContacts  } from \"redux/contacts/contactsOperations\";\n  \nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.contacts.items);\n  const filterContacts = useSelector(state => state.contacts.filter);\n  const filteredList = data.filter(contact => contact.name.toLowerCase().includes(filterContacts.toLowerCase()) ||\n  contact.number.includes(filterContacts));\n  const token = useSelector(state => state.auth.token);\n\n  useEffect(() => {\n    dispatch(fetchContacts(token));\n  }, [dispatch, token]);\n\n  return (\n        <ol className={css.contactList}>\n            {filteredList.length !== 0 ? (\n              filteredList.map(dataItem => {\n              return (\n              <ContactItem\n                  key={dataItem.id}\n                  id={dataItem.id}\n                  name={dataItem.name}\n                  number={dataItem.number}  \n              />\n              )}))\n              : (<li className={theme.item}>There is no one contact</li>)}\n        </ol>\n  );\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchBox\":\"Filter_SearchBox__Qvg3d\",\"SearchBox_label\":\"Filter_SearchBox_label__T2umY\",\"SearchBox_input\":\"Filter_SearchBox_input__oJXXC\"};","import css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.contacts.filter);\n    return (\n      <div className={css.SearchBox}>\n            <h4 className={css.SearchBox_label}>You can find contacts by name or number</h4>\n            <input\n              className={css.SearchBox_input}\n              type=\"text\"\n              placeholder=\"Please enter name\"\n              value={filter}\n              onChange={e => dispatch(filterContacts(e.currentTarget.value))}\n            >\n            </input>\n      </div>\n    );\n  };\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/Contactlist\";\nimport { Filter } from \"components/Filter/Filter\";\n\nexport const Contacts = () => {\n      return (\n          <div style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}>\n            <h2 style={{marginTop: '10px', marginBottom: '10px', fontSize: 30, color: \"grey\",}}>Please add contact</h2>\n            <ContactForm/>\n            <h3 style={{marginTop: '10px', marginBottom: '10px', fontSize: 30, color: \"#0000ff\",}}>Your contacts</h3>\n            <Filter/>\n            <ContactList/> \n          </div>\n      );\n};\n\nexport default Contacts;"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","useState","name","setName","number","setNumber","checkName","useSelector","state","contacts","items","map","contact","handleChange","event","currentTarget","value","reset","onSubmit","preventDefault","some","toLowerCase","alert","newState","operations","className","css","onChange","type","pattern","title","required","placeholder","ContactItem","onClick","ContactList","data","filterContacts","filter","filteredList","includes","token","auth","useEffect","fetchContacts","length","dataItem","theme","Filter","e","Contacts","style","display","alignItems","flexDirection","marginTop","marginBottom","fontSize","color"],"sourceRoot":""}